
import java.util.*;
import java.util.function.*;
public class Combinators {
   
   // returns p1 | p2
   public static Parser alt(Parser p1, Parser p2) {
      Parser parser = new Parser();
      parser.setParser(
         result->{
            if (result.fail)return result; 
            Choice answer = new Choice();
            answer.choice = p1.apply(result);
            if (answer.choice.fail)  {
               answer.choice = p2.apply(result);
            }
            if (answer.choice.fail) return answer.choice;
            answer.unseen = answer.choice.unseen;
            return answer;
      });
      return parser;
   }
   
   public static Parser seq(Parser p1, Parser p2) {
	   Parser parser = new Parser();
	      parser.setParser(
	         result->{
	            if (result.fail)return result; 
	            Concatination answer = new Concatination();
	            answer.kid0 = p1.apply(result);
	            if (answer.kid0.fail){
	            	return answer.kid0;
	            }
	            
	            answer.kid1 = p2.apply(answer.kid0);
	            if (answer.kid1.fail){
	            	return answer.kid1;
	            }
	            //answer.unseen = answer.kid1.unseen;
	            return answer;
	      });
	      return parser;
   }
   public static Parser regEx(String regex) {
       Parser parser = new Parser();
       parser.setParser(
           result -> {
               // Parsing failed earlier. We are done
               if (result.fail) {
                   result.fail = true;
                   return result;
               }

               Literal literal = new Literal();
               // Need to handle an empty list somehow
               if (result.unseen.size() == 0) {
                   literal.fail = true;
                   return literal;
               }

               // Need to check token against regex
               String token = result.unseen.remove(0);
               if (token.matches(regex)) {
                   literal = new Literal();
                   literal.token = token;
                   return literal;
               }
               else {
                   result.fail = true;
                   return result;
               }
           });
       return parser;
   }
	   
   }
}
