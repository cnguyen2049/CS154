import java.util.Set;
import java.util.*;
import java.util.function.*;

/*
 * Pseudo-algorithm
Is the set passed empty? Done
If not, take an element out
recursively call method on the remainder of the set
return the set composed of the Union of 
(1) the powerset of the set without the element (from the recursive call) 
(2) this same set (i.e., (1)) but with each element therein unioned with the element initially taken out
 */
public class Operations {
	public static <T> Set<Set<T>> power(Set<T> a) {
		System.out.println("The input set is = " + a);
		Set <Set<T>> set = new HashSet<Set<T>>();
		if(a.isEmpty()){
			set.add(new HashSet<T>());
			return set;
		}
		List<T> list = new ArrayList<T>(a);
		T firstElement = list.get(0);
		System.out.println("First element is before Loop = " + firstElement);
		Set<T> restElements = new HashSet<T>(list.subList(1, list.size()));
		System.out.println("Rest of element passed in = " + restElements);
		for(Set<T> recursionSet:power(restElements)){
			System.out.println("First element is = " + restElements);
			Set<T> resultSet = new HashSet<T>();
			System.out.println("First element is = " + firstElement);
			System.out.println("resultSet 1 is = " + resultSet);
			resultSet.add(firstElement);
			System.out.println("resultSet 2 is = " + resultSet);
			resultSet.addAll(recursionSet);
			System.out.println("resultSet 3 is = " + resultSet);
			System.out.println("recursion is = " + recursionSet);
			set.add(resultSet);
			set.add(recursionSet);
			//System.out.println("Final Set is = " + set);
			
		}
		return set;
	}
	
	public static void main (String args []){
		 Set<Integer> mySet = new HashSet<Integer>();
		 mySet.add(1);
		 mySet.add(2);
		 mySet.add(3);
		 for (Set<Integer> s : power(mySet)) {
		     System.out.print(s);
		 }
		
	}
}
